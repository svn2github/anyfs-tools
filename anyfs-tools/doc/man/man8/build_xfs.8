.TH build_e2fs 8 "04 Aug 2006" "Version 0.84.5"
.SH "NAME"
build_xfs \- build XFS filesystem proceeding from information
from external inode table file.
.SH "SINOPSYS"
.nf
.BI "build_xfs [\-b " subopt=value " ] [\-d " subopt [ =value "]]"
.BI "	[\-i " subopt=value "] [\-l " subopt [ =value "]] [\-f]"
.BI "	[\-n " subopt [ =value "]] [\-q] [\-r " subopt [ =value "]]"
.BI "	[\-s " subopt [ =value "]] [\-N] [\-L " label "] " "inode_table devicename "
.fi
.SH "DESCRIPTION"
.B build_xfs
proceeds from external inode table information for building 
.BR XFS 
filesystems on device.

Filesystem building consist of several steps:

1) at first it remaps anyfs inodes to XFS inodes numbers.
So it choose location for information about inodes.

2) then in separate bits map marks all blocks in which will be kept
filesystem system information (including one about inodes).

3) it frees this blocks from user information.
.br
WARNING. If device has small free space, at this stage possible not
shortage space for new filesystem, so not only old filesystem will be
destroyed, but new filesystem will not be built. Nevertheless changed
inode table will be saved if it's possible. But it will better to avoid
so situation by running utility with
.B -N
option at first.

4) it writes information about filesystem inodes.

5) it builds B-trees of free blocks and inodes, and writes superblocks.

.br
At 4-5 stages also may be errors, nevertheless after third stage
new inode table already saved and it should not to lead to irrevocable
data loss.
	
.SH "OPTIONS"
.B build_xfs
utility based on
.B mkfs.xfs
from
.B xfsprogs
package version 2.7.11. The most options keeps its original meaning
and here will not be explained. Here describes only some important
options, new options and options with changing meaning.
.TP
.BR \-b " Block size options."
Filesystem blocksize given in inode table. Trying to point using this option
blocksize different with pointed in inode table leads to error message
and advice to use
.BR reblock (8)
for changing filesystem blocksize.
.TP
.BI \-p " protofile"
This options and its functions was removes from the utility --
self external inode table is more powerful protofile analogue.
.TP
.B \-N
causes build_xfs to not actually build a filesystem, nevertheless
so you may to know if there are not enough space for locating new
filesystem on device.
.TP
.B \-q
Don't print any messages.
.TP
.B \-v
you may to point this option to 3 times, with each time more increase
quantity of output messages.
.TP
.B \-V
Print the version number and exit.
.TP
.I inode_table
external inode table, from which it will read information about locating
user data files of current filesystem, its access permissions and
directory structure.
.TP
.I device
device for building new filesystem.

.SH "USAGE EXAMPLES"
Check for enough free space on device:
.br
$ build_xfs -N inode.table /dev/hda1

Build XFS:
.br
$ build_xfs inode.table /dev/hda1

.SH "AUTHOR"
Nikolaj Krivchenkov aka unDEFER <undefer@gmail.com>

.SH "BUG REPORTS"
Messages about any problem with using
.B anyfs-tools
package send to
undefer@gmail.com

You may append to problem description also the inode table
(compressed with gzip or bzip2 it must has not so more size)
and device/image size.

Block device size in 512 byte blocks you can get with command
`/sbin/blockdev --getsize <device>`

.SH "AVAILABILITY"
You can obtain the last version of package at
http://anyfs-tools.sourceforge.net

.SH "SEE ALSO"
.BR anyfs-tools(8),
.BR anyfs_inode_table(5),
.BR build_e2fs(8),
.BR mkfs.xfs(8)
